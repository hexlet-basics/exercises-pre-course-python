---

name: Неизменяемость
theory: |

  Допустим, у нас есть такой вызов:

  ```python
  name = 'Tirion'
  print(name.upper())  # => TIRION
  # Что напечатает на экран этот вызов?
  print(name)  # => ?
  ```

  Вызов метода `.upper()` возвращает новое значение, в котором все буквы преобразованы в верхний регистр, но он не меняет исходную строку. Поэтому внутри переменной окажется старое значение: `'Tirion'`. Эта логика справедлива для методов всех примитивных типов.

  Вместо того чтобы изменять значения, можно **заменить** значение. Для этого понадобятся переменные:

  ```python
  name = 'Tirion'
  name = name.upper()
  print(name)  # => TIRION
  ```

  https://replit.com/@hexlet/python-basics-objects-methods-immutability

instructions: |

  Данные, вводимые пользователями, часто содержат лишние пробельные символы в конце или начале строки. Обычно их вырезают с помощью метода [.strip()](https://docs.python.org/3/library/stdtypes.html), например, было: `'   hello\n '`, стало: `'hello'`.

  Обновите переменную `first_name`, записав в неё то же самое значение, но обработанное методом `.strip()`. Распечатайте то, что получилось, на экран.

definitions:
  - name: Метод
    description: |
      это функция или процедура, принадлежащая какому-то классу или объекту.
