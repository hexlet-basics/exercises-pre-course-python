---

name: The construct else + if = elif
theory: |

  The function `get_type_of_sentence()` only distinguishes between question and normal sentences. Let's add support for exclamatory sentences to it:

  ```python
  def get_type_of_sentence(sentence):
      last_char = sentence[-1]

      if last_char == '?':
          sentence_type = 'question'

      if last_char == '!':
          sentence_type = 'exclamation'
      else:
          sentence_type = 'normal'

      return 'Sentence is ' + sentence_type

  print(get_type_of_sentence('Who?'))  # => 'Sentence is normal'
  print(get_type_of_sentence('No'))    # => 'Sentence is normal'
  print(get_type_of_sentence('No!'))   # => 'Sentence is exclamation'
  ```

  We have added an exclamation checker for exclamation sentences. Technically this feature works, but it treats question sentences incorrectly. There are also problems with it in terms of semantics:

  * The exclamation point is checked in any case, even if there is already a question mark
  * The `else` branch is described for the second condition, but not for the first. Therefore the question sentence becomes `normal'`.

  To remedy the situation, let's take another possibility of conditional construction:

  ```python
  def get_type_of_sentence(sentence):
      last_char = sentence[-1]

      if last_char == '?':
          sentence_type = 'question'
      elif last_char == '!':
          sentence_type = 'exclamation'
      else:
          sentence_type = 'normal'

      return 'Sentence is ' + sentence_type

  print(get_type_of_sentence('Who?'))  # => 'Sentence is question'
  print(get_type_of_sentence('No'))    # => 'Sentence is normal'
  print(get_type_of_sentence('No!'))   # => 'Sentence is exclamation'
  ```

  Now all the conditions are lined up in a single construction. The `elif` means "if the previous condition is not satisfied, but the current condition is satisfied". This is the scheme:

  * If the last letter is `? then `'question'`
  * if the last letter is `!`, then `'exclamation'`
  * other options are `` normal'``.

  Only one of the code blocks that refers to the whole `if` construct will be executed.

instructions: |

  The electronic map of Westeros that Sam implemented shows Stark allies in green circles, enemies in red, and neutral families in gray.

  Write a function `who_is_this_house_to_starks()` for Sam that takes the family name as input and returns one of three values: `'friend'`, `'enemy'`, `'neutral'`.

  Rules of Determination:

    * Friends (`'friend'`): `'Karstark'`, `'Tully'`
    * Enemies (`'enemy'`): `'Lannister'`, `'Frey'`
    * Any other families are considered `neutral'`.

  Examples of calls:

  ```python
  print(who_is_this_house_to_starks('Karstark'))  # => 'friend'
  print(who_is_this_house_to_starks('Frey'))      # => 'enemy'
  print(who_is_this_house_to_starks('Joar'))      # => 'neutral'
  print(who_is_this_house_to_starks('Ivanov'))    # => 'neutral'
  ```

tips: []

definitions:
  - name: "else + if = elif"
    description: "a way of setting several alternative conditions."
